0.> Table of contents

1.> Introduction

This readme is intended to describe the requirements to compile and
run the code PIXIE3D. PIXIE3D solves the extended
magnetohydro-dynamics (MHD) equations in 3D arbitrary geometries using
fully implicit Newton-Krylov algorithms. The code employs the
open-source PETSc library for parallelization, and the HDF5 library
for data management. It is primarily used to study plasma behavior in
magnetic confinement fusion devices (MFE DUSA). The spatial
discretization of the MHD equations in PIXIE3D is described in
Ref. [1]. Details of the temporal discretization can be found in
Refs. [2-5].

2.> Requirements

We proceed to describe the minimum requirements to compile and run
PIXIE3D.

2.1> Compilers

The serial version of PIXIE3D (pixie3d.x) only requires a Fortran
90/95 compiler. PIXIE3D has been compiled and tested with Absoft,
Lahey, and Intel f95 compilers. Other will be added in time.

The parallel version of PIXIE3D (pixie3d.petsc.x) requires an ANSI C
compiler in addition to the fortran compiler. In addition, certain
libraries need to be present. We proceed to discuss these next.

2.2> External libraries

The serial version of PIXIE3D does not require any external
libraries. The parallel version uses PETSC 2.2.0 for parallelization
(included in the electronic distribution). PETSC, in turn, requires an
MPI implementation (we have tested it with MPICH-1.2.5.2, which is
also included in the electronic distribution).

Advanced graphics postprocessing in 3D requires HDF5 libraries
(v. 1.6.2. and associated tools, also included). Such libraries allows
the user to generate an HDF5 format file, readable by the LLNL
graphics interpreter Visit (see next section).

All these libraries contain documentation as to how to compile them
and test them, and these are not reproduced here in the interest of
brevity.

2.3> Graphics postprocessors

PIXIE3D comes with its own postprocessor, called pixplot.x. This file
will take output from PIXIE3D and generate various files with time traces,
contour plots (viewable with Xdraw) and fully 3D plots (in HDF5 format,
which can be viewed with the free Visit software). We proceed to describe 
the visualization software below.

2.3.1> Xdraw

Xdraw is a free, simple (yet powerful) 1D and 2D plotter (included in
this electronic distribution). The postprocessor "pixplot.x" will
always generate xdraw files for 2D contour plots, even in 3D runs. The
user can choose how to slice the solution among the main logical coordinate
axes (see Sec. 5.1 below).

Xdraw is invoked with "xdraw [keyword]", where "keyword" can be "car"
(for cartesian coordinate plots, "cnv" for contravariant component
plots, "cov" for covariant component plots, "diag" for diagnostic
plots, "pert" for perturbation plots, and "gamma" for time histories
of various diagnostics (described in Sec. 5.1 below). When invoked,
xdraw reads the file draw[keyword].in to read its configuration, and
plot accordingly. These draw*.in files are generated automatically by
pixplot.x.

2.3.2> Visit

This is an open source, freely available visualization solfware
developed at LLNL. An interface has been developed for PIXIE3D to
render 2D and 3D plots generated by the latter. Version 1.5.2 or later
is required, and can be obtained from

"http://www.llnl.gov/VisIt/home.html"

3.> Installation instructions

PIXIE3D is easy to install. Just execute:

tar xzvf pixie3d.tar.gz

to generate the directory structure, and change directories into "pixie3d".
From there, type:

# make setup

to setup all required compilation files.

4.> Compilation instructions

In order to compile PIXIE3D, the user will need to edit the Makefile
in the main distribution directory to setup some system-dependent
variables, such as the installation directory for PETSC (PETSC_DIR; if
a parallel compilation is required) and that for the HDF5 distribution
(HDF5_HOME; if visit is to be used for postprocessing).

Currently, PIXIE3D has been successfully compiled with three different
compilers: Absoft f90, Lahey lf95, and Inter ifort. More compilers will
be tested in the future.

4.1> Serial compilation

For a serial compilation, type

# make distclean
# make

4.2> Parallel compilation

Linking against the PETSC library requires one to set the variable
BOPT to either "g" (debugging) or "O" (optimized). For production
runs, "O" should normally be used, and one should type

# make BOPT=O distclean
# make BOPT=O pixie3d
# make BOPT=O pixplot

to generate pixie3d.petsc.x and pixplot.petsc.x (the parallel postprocessor).

4.3> Special Makefile flags

There are several specific purpose flags in the makefile that one can
invoke when compiling PIXIE3D. These are:

FC: to set the fortran compiler (default is f90) 

OPT: to set the optimization level. Can be set to "g" (debuggin), "O"
(optimized), "p" (profiling), "s" (static; for Absoft only), and "v"
(verbose), and combinations (e.g. one can set OPT=Opv to combine the
optimized version with profiling and verbose options).

VECPOT: if set, the vector potential version of PIXIE3D will be
compiled, generating the executables "pixie3d_a.x" and "pixplot_a.x"

VMEC: if set, the contributed VMEC interface for 3D Tokamak and
Stellarator equibria will be compiled and linked. This interface is 
physically located under the "contrib" directory.

5.> Using PIXIE3D

5.1> Input file

Before execution, the user should set the input file,
"pixie3d.in". Defaults are provided within PIXIE3D for all quantities,
which are explained in the readInput.F file. An excerpt of this file
is included in App. 1.

Of these parameters, several deserve further discussion here.

equil: specifies the equilibrium type. Several are provided. The user
       is encouraged to look into the file setEquilibrium.F to
       view available ones, and to code new ones.

5.2> Serial execution

Serial execution requires the user simply to type:

# ./pixie3d.x (or ./pixie3d_a.x for the vector potential version).

After completion of the run, the user should invoke:

# ./pixplot.x (or ./pixplot_a.x)

for postprocessing. Plots can be viewed by invoking xdraw or visit (if
an HDF5 file has been created).

5.3> Parallel execution

Parallel execution will be largely dependent on the MPI distribution
that has been used to compile PETSc, and on the availability of a
queue management system. With mpich-1.2.5.2, one would
type, for instance:

# mpirun [mpi options] pixie3d.petsc.x -snes_mf [petsc options]

Several mpirun options are available according to the MPI
distribution. Similarly with PETSC. The option "-snes_mf" (which
indicates that a Jacobian-free approach is to be used) is
mandatory. Specific PETSC options for PIXIE3D include:

     OUTPUT CONTROL:                                     
        -ilevel <ilevel>: level of output info           
                                                         
     SOLVER:                                             
	-asm_PC: use an additive Schwartz (ASM) preconditioner
        -aspc_its <its>: number of ASM iterations        
        -id_PC: identity preconditioner                  
                                                         
     TIME STEPPING:                                      
        -nmax <nmax>: max. iteration # of time steps     
        -tmax <tmax>: final time                         
                                                         
     PARALLEL DA:                                        
        -npx: processors in X direction                  
        -npy: processors in Y direction                  
        -npz: processors in Z direction                  

6.> References

[1] L. Chacón, "A non-staggered, conservative, , finite-volume scheme for 3D implicit extended magnetohydrodynamics in curvilinear geometries," Comput. Phys. Comm., 163 (3),  143-171 (2004).
[2] L. Chacón,  D. A. Knoll, J. M. Finn, "An implicit, nonlinear reduced resistive MHD solver," J. Comput. Phys., 178, 15-36 (2002).
[3] L. Chacón, D. A. Knoll, "A 2D high-beta Hall MHD implicit nonlinear solver," J. Comput. Phys., 188 (2), 573-592 (2003).
[4] L. Chacón, "A fully implicit 3D extended MHD algorithm," 32nd EPS Conference on Plasma Physics, Tarragona, Spain, June 27-July 1, 2005.
[5] L. Chacón, D. A. Knoll, "A fully implicit 3D extended MHD algorithm," 33rd EPS Conference on Plasma Physics, Rome, Italy, June 19-23, 2006.

> Appendix 1: Default values for input parameters.

For "pixie3d.x":

      !General setup
      neqd     = 8             ! Number of degrees of freedom (equations)

      nxd      = 64            ! Mesh points in x-direction
      nyd      = 64            ! Mesh points in y-direction
      nzd      = 64            ! Mesh points in z-direction

cc      npx      = 0             ! Number of processors in X-direction (if zero, determined by code)
cc      npy      = 0             ! Number of processors in Y-direction (if zero, determined by code)
cc      npz      = 0             ! Number of processors in Z-direction (if zero, determined by code)

      coords   = 'car'         ! Coordinate system (see grid_mod.f)

      xmax     = 1d0           ! Length in x-direction
      ymax     = 1d0           ! Length in y-direction
      zmax     = 1d0           ! Length in z-direction

      xmin     = 0d0           ! Length in x-direction
      ymin     = 0d0           ! Length in y-direction
      zmin     = 0d0           ! Length in z-direction

      gparams  = 0d0           ! Array with additional grid parameters (grid-dependent)

      numerical_grid = .false. ! Whether grid metrics are calculated numerically (.true.)
                               !    or analytically.

      mg_ratio = 2             ! MG coarsening ratio

      bcs      = (/ 'def','def','per','per','per','per' /) 
                               ! Defines topological constraints. Convention:
                               !   + 'def' = default (set in code)
                               !   + 'per' = periodic
                               !   + 'spt' = singular point
                               !   + 'sym' = symmetry (homogeneous Neumann)

      !Time stepping
      dt       = 5.            ! Time step (if zero, dt is calculated in code)
      tmax     = 0d0           ! Target time, in Alfven times.
      numtime  = -1            ! Number of time steps
      ndstep   = 0             ! # time steps between plots (if zero,
                               !        ndstep is calculated in code)
      dstep    = 0.            ! Time interval between plots (if zero,
                               !        dstep is calculated in code)
      timecorr = .true.        ! Time adaptiveness based on Newton convergence
      cnfactor = -.48          ! Crank-Nicolson factor
      sm_flag  = 0             ! Time smoothing flag:
                               !   0 -> Theta scheme
                               !   1 -> Rannacher time stepping (CN scheme)
                               !   2 -> BDF2
      sm_pass  = 2             ! Number of initial smoother passes for Rannacher TS

      !NK parameters
      tolgm    = 5.0d-2        ! Inexact Newton parameter (GMRES conv. tolerance)
      rtol     = 1.0d-4        ! Newton relative convergence tolerance
      atol     = 0d0           ! Newton absolute convergence tolerance
      stol     = 0d0           ! Newton update convergence tolerance
      mf_eps   = 0d0           ! Newtom matrix-free differencing parameter
      maxitnwt = 0             ! Maximum number of Newton its. (if zero, maxitnwt
                               !        is determined in code)
      maxksp   = 15            ! Maximum krylov subspace dimension
      maxitgm  = maxksp        ! Maximum GMRES iterations
      method   = 0             ! Constant forcing parameter for inexact Newton
                               !        (see etak_meth in NewtonGmres doc)
      global   = 0             ! Do not use globalization (see global in NewtonGmres doc)
      damp     = 1d0           ! Damping parameter in Newton (see NewtonGmres doc))
      dt0      = 1d30          ! Initial pseudo-transient time step (" " ")
      iguess   = 1             ! Whether preconditioner is used to give initial
                               !        guess to GMRES (1)

      !Preconditioner parameters
      nsweep   = 5             ! Number of SGS sweeps
      maxvcyc  = 1             ! Maximum number of V-cycles
      mgtol    = 1d-3          ! MG convergence tolerance
      precon   = 'si'          ! Type of preconditioner
      precpass = 1             ! Number of SI iterations in preconditioner
      asm_PC   = .false.       ! Whether we are doing ASM PC (in parallel)

      !Physics parameters
      nu       = 1d-3          ! Reynolds number
      eta      = 1d-3          ! Lundquist number
      dd       = 1d-3          ! Particle diffusion
      chi      = 1d-3          ! Thermal diffusivity

      hrtmn    = 0d0           ! Hartmann number (1/sqrt(nu*eta))
      prndtl   = 0d0           ! Prandtl number (nu/eta)

      gamma    = 5./3.         ! Polytropic constant of plasma

      di       = 0d0           ! Hall parameter

      temp_ratio = 1d0         ! Ion-electron temperature ratio

      !Discretization parameters
      k_si     = 0d0           ! SI constant

      nc_eom_jxb = .false.     ! Whether we use non-conservative form of jxB in EOM
      nc_eom_gp  = .false.     ! Whether we use non-conservative form of grad(p) in EOM
      nc_eom_v   = .false.     ! Whether we use non-conservative form of inertia in EOM
      solenoidal = .true.      ! Whether we use solenoidal discret. of Faraday's law
      solve_rho  = .true.      ! Whether we solver continuity equation or not
      sym_st     = .false.     ! Whether we use the symmetric form of the viscous stress
                               !   tensor or not

      advect   = 2             ! Type of advective scheme
                               !    1,7 -> upwind,
                               !    2 -> centered (ZIP)
                               !    3 -> QUICK,
                               !    4 -> SMART,
                               !    5 -> smooth SMART,
                               !    6 -> centered high order

      !Initial condition
      equil    = ''            ! Type of equilibrium
      dlambda  = .2            ! Characteristic width of Harris sheet
      rshear   = 1.            ! Ratio of magnetic to fluid sheet thicknesses
      vparflow = 0.            ! Maximum parallel fluid flow
      vperflow = 0.            ! Maximum perpendicular fluid flow
      source   = .true.        ! Impose source to provide equilibrium

      prho     = 0d0           ! Density perturbation
      pvx      = 0d0           ! Vx perturbation
      pvy      = 0d0           ! Vy perturbation
      pvz      = 0d0           ! Vz perturbation
      pbx      = 0d0           ! Bx perturbation
      pby      = 0d0           ! By perturbation
      pbz      = 0d0           ! Bz perturbation
      ptemp    = 0d0           ! Temperature perturbation
      nh1      = 1             ! Harmonic number for perturbation in axis 1
      nh2      = 1             ! Harmonic number for perturbation in axis 2
      nh3      = 1             ! Harmonic number for perturbation in axis 3
      odd      = .false.       ! Symmetry of perturbation
      random   = .false.       ! Random initialization if true

      !Grid stuff
      gp1%pack = .false.       ! Do not pack in X-direction
      gp2%pack = .false.       ! Do not pack in Y-direction
      gp3%pack = .false.       ! Do not pack in Z-direction
      check_grid = .false.     ! Whether to dump grid info or not

      !I/O parameters
      restart  = .false.       ! Restarting flag
      ilevel   = 0             ! Level of solver output information
      debug    = .false.       ! Debugging flag
      inputfile  ='pixie3d.in' ! Default input file
      recordfile ='record.bin' ! Default output file
      equ_file   ='pixie3d.equ'! Default equilibrium file (when needed)

For "pixplot.x":

ndplot = 1     ! Postprocessing interval (# of time steps; integer)
dplot  = 1d0   !       "          "      (time interval; real)
hdf_plot = f   ! Whether an HDF5 plot is to be created

prof_cont = 1,'x',1,1,1  !Profile configuration (XDRAW)
                         !Fields:
                         !  - Direction (1 -> x, 2 -> y
