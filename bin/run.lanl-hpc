#!/bin/bash

# Help message

help()
{
cat <<HELP
Usage: 

$0 -np procs [-h] [-d] [-wc mm] [-qos queue] [-A account] [-env environment] 
[-omp_tasks tasks] [-x executable] [-t tmax] [-r tmax] [-rtgz file]
[-ntar] [-equ file] [-eig file]  [-recursive] -- inputfile [options]

where:
	-np procs:     indicates the total (MPI+OMP) number of cores (required)
	-h:            gives this message
	-d:            turn on debugging
	-qos queue:    indicates quality of service queue (default standard)
        -A:            selects account (default w21_magfusion)
        -env:          specifies environment [intel, gcc (default)] 
	-wc time:      indicates wall-clock time (in minutes; default 16 hours)
        -omp_tasks:    number of OMP tasks per MPI task (default 1)
	-x executable: indicates the executable file (default is 'iRFP.x')
	-t tmax:       indicates final simulation time
	-r tmax:       indicates that the job should be restarted up to time tmax 
                         (if tmax=0, final time is not changed)
	-rtgz file:    indicates tarball file to use to restart (default is 
                         inputfile.tar.gz)
	-ntar:         does not tar up directory 
	-equ:          equilibrium file 
	-eig:          eigenmode file 
        -recursive     whether we automatically monitor termination and restart
	inputfile:     is the input file with or without the extension .in
	options:       options passed directly to the executable
HELP
exit 0
}

# Defaults

cores_per_node=$(lscpu | grep "CPU(s):         " | grep -v "NUMA" | cut -c8- | xargs)
threads_per_core=$(lscpu | grep "Thread(s)" | cut -c20- | xargs)
cores_per_node=$((cores_per_node/threads_per_core))

restart=f
parallel=f
tar=t
equf=f
debug=f
machinefile="machines.LINUX"
restartfile=""
code_ifile=pixie3d
code_efile=pixie3d
wtime=960
adiosfile="adios_config.xml"
recursive=f
create_dir=t
account="w23_magfusion"
qos="standard"
np=""
omp_tasks=1
environment="gcc"

# Parse command line options

if [ "$#" = 0 ]; then
  help
  exit 1
fi

while [ -n "$1" ]; do
case $1 in
	-A) account=$2;shift 2;;
	-h) help;shift 1;;
	-d) debug=t;shift 1;;
	-wc) wtime=$2;shift 2;;
	-qos) qos=$2;shift 2;;
	-omp_tasks) omp_tasks=$2;shift 2;;
	-env) environment=$2;shift 2;;
	-x) executable=$2;shift 2;;
	-t) restart=f;tmax=$2;shift 2;;
	-r) restart=t;tmax=$2;shift 2;;
	-rtgz) restart=t;restartfile=$2;shift 2;;
	-np)parallel=t;np=$2;shift 2;;
	-ntar)tar=f;shift 1;;
	-equ)equf=t;equfile=$2;shift 2;;
	-eig)eigf=t;eigfile=$2;shift 2;;
	-recursive)recursive=t;shift 1;;
	--) shift;break;;
	-*) echo "error: no such option $1. -h for help";exit 1;;
	*)  break;;
esac
done

inputfile=`echo "$1" | sed "s/\.in//"`
shift

options=$*

if [ "$restartfile" = "" ]; then
  restartfile=$inputfile
else
  restartfile=`echo "$restartfile" | sed "s/\.tar\.gz//"`
fi

# Select host

#if [ "$node" = "" ]; then
#  node=`hostname -s`
#fi

#if [ "$debug" = "t" ]; then
#  echo "==> MPI node is $node"
#fi

# Check parameters

if [ "x$wtime" = "x" ]
then
  echo "No execution time specified. Aborting"
  exit 1
fi

if [ "x$account" = "x" ]
then
  echo "No account specified. Aborting"
  exit 1
fi

if [ "x$qos" = "x" ]
then
  echo "No queue specified. Aborting"
  exit 1
fi

if [ "x$np" == "x" ]; then
  echo "Please specify number of procs np"
  exit 1
fi

# Select working directory

path=$PWD

if [ "$create_dir" = "t" ]
then
  count=.	
  dir=$inputfile.scratch
  while [ -d "$dir" ]; do
    dir="${dir}${count}"
  done
  mkdir $dir
else
  dir=.
fi

if [ "$debug" = "t" ]; then
  echo "==> Working directory is $path/$dir"
fi

# Select executable

if [ "$executable" = "" ]
then
  if [ "$parallel" = "t" ]
  then
    executable=`ls $code_efile.petsc.x 2>/dev/null`
  else
    executable=`ls $code_efile.x 2>/dev/null`
  fi
else
  executable=`ls $executable 2>/dev/null`
fi

if [ "$executable" = "" ]
then
  echo "No executable found. Aborting"
  exit 1
fi

if [ "$debug" = "t" ]; then
  echo "==> Program to run is $executable"
fi

# Select environment

if [ "$environment" = "gcc" ]
then
  load_mod="source ~/bin/load_gcc-12.1.0_chicoma"
else
  load_mod="source ~/bin/load_intel-19.0.4_badger"
fi

# Copy necessary files to working directory

if [ -f $inputfile.in ]; then
  cp $inputfile.in $dir 2>/dev/null
elif [ -f infiles/$inputfile.in ]; then
  cp infiles/$inputfile.in $dir 2>/dev/null
elif [ "$restart" != "t" ]; then
  echo "No input file $inputfile.in found. Aborting"
  exit 1
fi

if [ -f $adiosfile ]; then
  cp $adiosfile $dir 2>/dev/null
elif [ -f infiles/$adiosfile ]; then
  cp infiles/$adiosfile $dir 2>/dev/null
elif [ "$restart" != "t" ]; then
  echo "No ADIOS file $adiosfile found. Aborting"
  exit 1
fi

if [ "$equf" = "t" ]; then
 if [ -f "$equfile" ]; then
  cp $equfile $dir 2>/dev/null
 elif [ -f infiles/$equfile ]; then
  cp infiles/$equfile $dir 2>/dev/null
 else
  echo "No equilibrium file found. Aborting"
  exit 1
 fi
fi

if [ "$eigf" = "t" ]; then
 if [ -f "$eigfile" ]; then
  cp $eigfile $dir 2>/dev/null
 elif [ -f infiles/$eigfile ]; then
  cp infiles/$eigfile $dir 2>/dev/null
 else
  echo "No eigenvalue file found. Aborting"
  exit 1
 fi
fi

cp $executable $dir 2>/dev/null

#if [ "$executable" = "t3d.x" ]; then
#  cp pixplot.x $dir 2>/dev/null
#fi

if [ "$recursive" = "t" ]; then
  cp scriptmanage $dir
fi

# Check for restart

if [ "$restart" = "t" -a "$tar" = "t" ]
then
   if [ -d $path/tarfiles ]; then
     rpath=$path/tarfiles
   else
     rpath=$path
   fi
   if [ -f "$rpath/$restartfile.tar.gz" ]; then
     if [ "$debug" = "t" ]; then
       echo "==> Restarting using $restartfile.tar.gz"
     fi
     tar xzf $rpath/$restartfile.tar.gz --exclude $restartfile.in --exclude $machinefile --exclude $executable
#     mv $restartfile.log $inputfile.log

     if [ "$debug" = "t" ]; then
       echo "==> Figuring out number of processors"
     fi

#     if [ ! -f "record.bp" ]; then
#       np=`ls record.bin_* 2> /dev/null | wc -l`

#       if [ "$np" != "1" -a "$parallel" = "f" ]; then
#         echo "This is a parallel run! Set -np to $np"
#         exit 1
#       fi
#     fi

     if [ "$debug" = "t" ]; then
       echo "Number of processors for restart = $np"
     fi
   else
     echo "Cannot find specified restart file: $restartfile"
     exit 1 
   fi
fi

# Execution preparations

cd $dir

rm $code_ifile.in  2>/dev/null
cp $inputfile.in $code_ifile.in  2>/dev/null
cp $equfile $code_ifile.equ  2>/dev/null
cp $eigfile $code_ifile.eig  2>/dev/null

if [ "$restart" = "t" ]
then
   sed  -i -e '/restart/{' \
        -e 'c\' \
        -e '    ts_restart = t' \
        -e '}' \
        $code_ifile.in 
else
   sed  -i -e '/restart/{' \
        -e 'c\' \
        -e '    ts_restart = f' \
        -e '}' \
        $code_ifile.in
fi

if [ "$tmax" != "" -a "$tmax" != "0" ]
then
    sed -i -e '/tmax/{' \
        -e 'c\' \
        -e "    tmax     = $tmax" \
        -e '}' \
        $code_ifile.in
fi

# Dump SLURM configuration file

cat > go.sub <<QSUB
#!/bin/bash
#
#  predict the duration of the job
#SBATCH -t $wtime
#  request resources (qos, number of MPI tasks)
#SBATCH --qos=$qos
#SBATCH --nodes=$(((np+cores_per_node-1)/cores_per_node))
#SBATCH --ntasks-per-node=$((cores_per_node/omp_tasks))
#  specify the pathname for output
#SBATCH -o $inputfile.log
#SBATCH -e $inputfile.err
#  name for job
#SBATCH --job-name $inputfile
#  select account
#SBATCH -A $account
#SBATCH -p standard
#  send email at beginning, end, and abort
#SBATCH --mail-type=FAIL,BEGIN,END
#SBATCH --mail-user=$USER@lanl.gov
#  forward current environment variables to the job
#SBATCH --export=ALL 

date

$load_mod

OMP_NUM_THREADS=$omp_tasks srun -n $((np/omp_tasks)) $executable $options -cpu_quota $((wtime*59)) -log_summary >> $inputfile.out

RETURN_VALUE=\$(<exit_code.txt)
#RETURN_VALUE=\$?  #Exit code from last job

#echo "\$RETURN_VALUE" > exit_code.txt

date

# Store tarball in proper place

if [ "$tar" = "t" -a "\$RETURN_VALUE" = "0" ]
then
  if [ "$debug" = "t" ]; then
     echo "==> Storing tarball..."
  fi

  cd ..

  tar zcf $inputfile.tar.gz $dir/* 

  if [ -d "$path/tarfiles" ]; then
    mv $inputfile.tar.gz $path/tarfiles
  else
    mv $inputfile.tar.gz $path
  fi
  cd $path
  rm -r $dir

fi

exit

QSUB

# Execute

if [ "$debug" = "t" ]; then
   echo "==> Executing SLURM script..."
fi

if [ "$recursive" = "t" ]; then
  ./scriptmanage go.sub $code_ifile.in > scriptmanage.log &
else
  sbatch go.sub
fi

exit
