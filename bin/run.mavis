#!/bin/bash

# Help message

help()
{
cat <<HELP
Usage: 

run [-h] [-d] [-np procs] [-wc hh:mm:ss] [-x executable] [-r tmax] [-rtgz file] [-ntar]
        [-omp_tasks tasks] [-equ file] [-eig file] -- inputfile [options]

where:
	-h:            gives this message
	-d:            turn on debugging
	-np procs:     indicates the number of processors
        -omp_tasks:    number of OMP tasks per MPI task (default 1)
	-wc time:      indicates wall-clock time (in format hr:min:sec; default: 10 days)
	-x executable: indicates the executable file (default is 'pixie3d.x')
	-r tmax:       indicates that the job should be restarted up to time tmax 
                         (if tmax=0, final time is not changed)
	-rtgz file:    indicates tarball file to use to restart (default is 
                         inputfile.tar.gz)
	-ntar:         runs in foreground in current directory (default: runs in 
                         background in separate directory and creates 
                         tarfile inputfile.tar.gz)
	-equ:          equilibrium file 
	-eig:          eigenmode file 
	inputfile:     is the input file with or without the extension .in
	options:       options passed directly to the executable
HELP
exit 0
}

# Defaults

cores_per_node=48

restart=f
parallel=f
tar=t
equf=f
debug=f
restartfile=""
code_ifile=pixie3d
wtime="240:00:00"
adiosfile="adios_config.xml"
omp_tasks=1

# Parse command line options

if [ "$#" = 0 ]; then
  help
  exit 1
fi

while [ -n "$1" ]; do
case $1 in
	-h) help;shift 1;;
	-d) debug=t;shift 1;;
	-wc) wtime=$2;shift 2;;
	-omp_tasks) omp_tasks=$2;shift 2;;
	-x) executable=$2;shift 2;;
	-r) restart=t;tmax=$2;shift 2;;
	-rtgz) restart=t;restartfile=$2;shift 2;;
	-np)parallel=t;np=$2;shift 2;;
	-ntar)tar=f;shift 1;;
	-equ)equf=t;equfile=$2;shift 2;;
	-eig)eigf=t;eigfile=$2;shift 2;;
	--) shift;break;;
	-*) echo "error: no such option $1. -h for help";exit 1;;
	*)  break;;
esac
done

inputfile=`echo "$1" | sed "s/\.in//"`
shift

options=$*

if [ "$restartfile" = "" ]; then
  restartfile=$inputfile
else
  restartfile=`echo "$restartfile" | sed "s/\.tar\.gz//"`
fi

# Select host

#if [ "$node" = "" ]; then
#  node=`hostname -s`
#fi

#if [ "$debug" = "t" ]; then
#  echo "==> MPI node is $node"
#fi

# Check parameters

#if [ "x$wtime" = "x" ]
#then
#  echo "No execution time specified. Aborting"
#  exit 1
#fi

# Select working directory

path=$PWD

if [ "$tar" = "t" ]
then
  count=.	
  dir=$inputfile.scratch
  while [ -d "$dir" ]; do
    dir="${dir}${count}"
  done
  mkdir $dir
else
  dir=.
fi

if [ "$debug" = "t" ]; then
  echo "==> Working directory is $path/$dir"
fi

# Select executable

if [ "$executable" = "" ]
then
  if [ "$parallel" = "t" ]
  then
    executable=`ls $code_ifile.petsc.x 2>/dev/null`
  else
    executable=`ls $code_ifile.x 2>/dev/null`
  fi
else
  executable=`ls $executable 2>/dev/null`
fi

if [ "$executable" = "" ]
then
  echo "No executable found. Aborting"
  exit 1
fi

if [ "$debug" = "t" ]; then
  echo "==> Program to run is $executable"
fi

# Copy necessary files to working directory

if [ -f $inputfile.in ]; then
  cp $inputfile.in $dir 2>/dev/null
elif [ -f infiles/$inputfile.in ]; then
  cp infiles/$inputfile.in $dir 2>/dev/null
elif [ "$restart" != "t" ]; then
  echo "No input file $inputfile.in found. Aborting"
  exit 1
fi

if [ -f $adiosfile ]; then
  cp $adiosfile $dir 2>/dev/null
elif [ -f infiles/$adiosfile ]; then
  cp infiles/$adiosfile $dir 2>/dev/null
elif [ "$restart" != "t" ]; then
  echo "No ADIOS file $adiosfile found. Aborting"
  exit 1
fi

if [ "$equf" = "t" ]; then
 if [ -f "$equfile" ]; then
  cp $equfile $dir 2>/dev/null
 elif [ -f infiles/$equfile ]; then
  cp infiles/$equfile $dir 2>/dev/null
 else
  echo "No equilibrium file found. Aborting"
  exit 1
 fi
fi

if [ "$eigf" = "t" ]; then
 if [ -f "$eigfile" ]; then
  cp $eigfile $dir 2>/dev/null
 elif [ -f infiles/$eigfile ]; then
  cp infiles/$eigfile $dir 2>/dev/null
 else
  echo "No eigenvalue file found. Aborting"
  exit 1
 fi
fi

cp $executable $dir 2>/dev/null

#if [ "$executable" = "t3d.x" ]; then
#  cp pixplot.x $dir 2>/dev/null
#fi

cd $dir

# Check for restart

if [ "$restart" = "t" -a "$tar" = "t" ]
then
   if [ -d $path/tarfiles ]; then
     rpath=$path/tarfiles
   else
     rpath=$path
   fi
   if [ -f "$rpath/$restartfile.tar.gz" ]; then
     if [ "$debug" = "t" ]; then
       echo "==> Restarting using $restartfile.tar.gz"
     fi
     tar xzf $rpath/$restartfile.tar.gz --exclude $restartfile.in --exclude $executable
     mv $restartfile.log $inputfile.log

     if [ "$debug" = "t" ]; then
       echo "==> Figuring out number of processors"
     fi

     if [ ! -f "record.bp" ]; then
       np=`ls record.bin_* 2> /dev/null | wc -l`

       if [ "$np" != "1" -a "$parallel" = "f" ]; then
         echo "This is a parallel run! Set -np to $np"
         exit 1
       fi
     fi

     if [ "$debug" = "t" ]; then
       echo "Number of processors for restart = $np"
     fi
   else
     echo "Cannot find specified restart file: $restartfile"
     exit 1 
   fi
fi

# Execution preparations

rm $code_ifile.in  2>/dev/null
cp $inputfile.in $code_ifile.in  2>/dev/null
cp $equfile $code_ifile.equ  2>/dev/null
cp $eigfile $code_ifile.eig  2>/dev/null

if [ "$restart" = "t" ]
then
   sed  -i -e '/restart/{' \
        -e 'c\' \
        -e '    restart  = t' \
        -e '}' \
        $code_ifile.in 
else
   sed  -i -e '/restart/{' \
        -e 'c\' \
        -e '    restart  = f' \
        -e '}' \
        $code_ifile.in
fi

if [ "$tmax" != "" -a "$tmax" != "0" ]
then
    sed -i -e '/tmax/{' \
        -e 'c\' \
        -e "    tmax     = $tmax" \
        -e '}' \
        $code_ifile.in
fi

# Dump qsub configuration file

cat > go.pbs <<QSUB
#!/bin/bash
#PBS -j oe 
#PBS -N $inputfile
#PBS -q default
#PBS -l nodes=$((np/cores_per_node)):ppn=$cores_per_node
#PBS -l walltime=$wtime
#PBS -o $inputfile.pbs.log
#PBS -V

bash

echo "Number of threads=$omp_tasks"
echo "Number of procs= \$PBS_NP"
#echo "Nodefile \$PBS_NODEFILE"
echo "Nodes:"
cat \$PBS_NODEFILE | uniq

cd \$PBS_O_WORKDIR

mpirun --map-by node --mca btl_openib_verbose 1 -np $((np/omp_tasks)) -x OMP_NUM_THREADS=$omp_tasks $executable $options > $inputfile.log 2>&1

# Store tarball in proper place

if [ "$tar" = "t" ]
then
  if [ "$debug" = "t" ]; then
     echo "==> Storing tarball..."
  fi

  tar zcf $inputfile.tar.gz $inputfile* record* $code_ifile.in $executable go.pbs *.log
  rm record*

  if [ -d "$path/tarfiles" ]; then
    mv $inputfile.tar.gz $path/tarfiles
  else
    mv $inputfile.tar.gz $path
  fi
  cd $path
  rm -r $dir

fi

QSUB

# Execute

if [ "$debug" = "t" ]; then
   echo "==> Executing PBS script..."
fi

qsub go.pbs

exit 0
