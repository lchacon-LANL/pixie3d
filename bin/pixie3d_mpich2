#!/bin/bash

# Help message

help()
{
cat <<HELP
Usage: 

pixie3d [-h] [-d] [-n mpd_host] [-x executable] [-r tmax] [-np procs] [-ntar]
        [-equ file] [-eig file] -- inputfile [options]

where:
	-h:            gives this message
	-d:            turn on debugging
	-n mpd_host:   indicates the host where mpd daemon should be run 
                         (default is localhost)
        -machines machinefile : specifies file which lists machines
                         to run parallel job in (default is "machines.LINUX").
	-x executable: indicates the executable file (default is 'pixie3d.x')
	-r tmax:       indicates that the job should be restarted up to time tmax 
                         (if tmax=0, final time is not changed)
	-np procs:     indicates the number of processors to run the job on 
		         in parallel
	-ntar:         runs in foreground in current directory (default: runs in 
                         background in separate directory and creates 
                         tarfile inputfile.tar.gz)
	-equ:          equilibrium file 
	-eig:          eigenmode file 
	inputfile:     is the input file without the extension .in
	options:       options passed directly to the executable
HELP
exit 0
}

# Defaults

restart=f
parallel=f
tar=t
equf=f
debug=f
machinefile="machines.LINUX"

# Parse command line options

if [ "$#" = 0 ]; then
  help
  exit 1
fi

while [ -n "$1" ]; do
case $1 in
	-h) help;shift 1;;
	-d) debug=t;shift 1;;
	-n) mpd_node=$2;shift 2;;
	-x) executable=$2;shift 2;;
	-r) restart=t;tmax=$2;shift 2;;
	-np)parallel=t;np=$2;shift 2;;
	-machines)machinefile=$1;shift 1;;
	-ntar)tar=f;shift 1;;
	-equ)equf=t;equfile=$2;shift 2;;
	-eig)eigf=t;eigfile=$2;shift 2;;
	--) shift;break;;
	-*) echo "error: no such option $1. -h for help";exit 1;;
	*)  break;;
esac
done

inputfile=$1
shift

options=$*

# Select host

if [ "$mpd_node" = "" ]; then
  mpd_node=`hostname -s`
fi

if [ "$debug" = "t" ]; then
  echo "==> MPD node is $mpd_node"
fi

# Select working directory

path=$PWD

if [ "$tar" = "t" ]
then
  count=.	
  dir=$inputfile.scratch
  while [ -d "$dir" ]; do
    dir="${dir}${count}"
  done
  mkdir $dir
else
  dir=.
fi

if [ "$debug" = "t" ]; then
  echo "==> Working directory is $path/$dir"
fi

# Select executable

if [ "$executable" = "" ]
then
  executable=`ls pixie3d.x 2>/dev/null`
else
  executable=`ls $executable 2>/dev/null`
fi

if [ "$executable" = "" ]
then
  echo "No executable found. Aborting"
  exit 1
fi

if [ "$debug" = "t" ]; then
  echo "==> Program to run is $executable"
fi

# Copy necessary files to working directory

if [ -f $inputfile.in ]; then
  cp $inputfile.in $dir 2>/dev/null
elif [ -f infiles/$inputfile.in ]; then
  cp infiles/$inputfile.in $dir 2>/dev/null
elif [ "$restart" != "t" ]; then
  echo "No input file found. Aborting"
  exit 1
fi

if [ "$equf" = "t" ]; then
 if [ -f "$equfile" ]; then
  cp $equfile $dir 2>/dev/null
 elif [ -f infiles/$equfile ]; then
  cp infiles/$equfile $dir 2>/dev/null
 else
  echo "No equilibrium file found. Aborting"
  exit 1
 fi
fi

if [ "$eigf" = "t" ]; then
 if [ -f "$eigfile" ]; then
  cp $eigfile $dir 2>/dev/null
 elif [ -f infiles/$eigfile ]; then
  cp infiles/$eigfile $dir 2>/dev/null
 else
  echo "No eigenvalue file found. Aborting"
  exit 1
 fi
fi

if [ -f $machinefile ]; then
    cp $machinefile $dir 2>/dev/null
fi

cp $executable $dir 2>/dev/null

if [ "$executable" = "pixie3d.x" ]; then
  cp pixplot.x $dir 2>/dev/null
fi

cd $dir

# Check for restart

if [ "$restart" = "t" -a "$tar" = "t" ]
then
   if [ -d $path/tarfiles ]; then
     rpath=$path/tarfiles
   else
     rpath=$path
   fi
   if [ -f "$rpath/$inputfile.tar.gz" ]
   then
     if [ "$debug" = "t" ]; then
       echo "==> Restarting using $inputfile.tar.gz"
     fi
     tar xzf $rpath/$inputfile.tar.gz --exclude $inputfile.in --exclude $machinefile --exclude $executable
#     cp $inputfile.log $path/$dir
#     cp *.bin $path/$dir
   else
     echo "Cannot find specified restart file"
     exit 1 
   fi
fi

# Execution preparations

#cd $path/$dir

#code_ifile=`echo "$executable" | sed "s/\.x//"`
code_ifile=pixie3d

cp $inputfile.in $code_ifile.in  2>/dev/null
cp $equfile $code_ifile.equ  2>/dev/null
cp $eigfile $code_ifile.eig  2>/dev/null

if [ "$restart" = "t" ]
then
#   sed  -e '/restart/{' \
   sed  -i -e '/restart/{' \
        -e 'c\' \
        -e '    restart  = t' \
        -e '}' \
        $code_ifile.in 
#        $code_ifile.in > $code_ifile.out
#   mv $code_ifile.out $code_ifile.in
else
#   sed  -e '/restart/{' \
   sed  -i -e '/restart/{' \
        -e 'c\' \
        -e '    restart  = f' \
        -e '}' \
        $code_ifile.in
#        $code_ifile.in > $code_ifile.out
#   mv $code_ifile.out $code_ifile.in
fi

if [ "$tmax" != "" -a "$tmax" != "0" ]
then
#    sed -e '/tmax/{' \
    sed -i -e '/tmax/{' \
        -e 'c\' \
        -e "    tmax     = $tmax" \
        -e '}' \
        $code_ifile.in
#        $code_ifile.in > $code_ifile.out
#   mv $code_ifile.out $code_ifile.in
fi

# Execute

if [ "$parallel" = "t" ]
then
   if [ -f $machinefile ]
   then
     machine="-f $machinefile"
   fi
   executable="mpiexec -n $np ./$executable -snes_mf $options"
   if [ "$debug" = "t" ]; then
     echo "==> Setting up MPICH in node $mpd_node"
   fi

   ssh -n $mpd_node "/bin/bash ; \
                    cd $path/$dir ; \
                    cat $machinefile ; \
                    mpdboot -n $(($np/2)) $machine "
else

   executable="./$executable $options"

fi

if [ "$tar" = "t" ]
then

  if [ "$debug" = "t" ]; then
    echo "==> Executing cd $path/$dir ; \
         /usr/bin/time -v -o $inputfile.cpu $executable >> $inputfile.log"
  fi

  ssh -n $mpd_node "cd $path/$dir ; \
         /usr/bin/time -v -o $inputfile.cpu $executable >> $inputfile.log" 

# Package and remove temporary files

  if [ "$debug" = "t" ]; then
    echo "==> Packaging files..."
  fi

  files=`ls * 2>/dev/null`

  tar zcf $inputfile.tar.gz $files
  if [ -d "$path/tarfiles" ]; then
    mv $inputfile.tar.gz $path/tarfiles
  else
    mv $inputfile.tar.gz $path
  fi
  cd $path
  rm -r $dir

else

  if [ "$debug" = "t" ]; then
    echo "==> Executing cd $path/$dir ; /usr/bin/time $executable"
  fi

  ssh -n $mpd_node "cd $path/$dir ; /usr/bin/time $executable" 

fi

if [ "$parallel" = "t" ]
then
  if [ "$debug" = "t" ]; then
    echo "==> Calling off MPI..."
  fi

  ssh -n $mpd_node "mpdallexit"
fi
