#!/bin/bash

help()
{
cat <<HELP
Usage: 

$0 submit_script inputfile [job#]

where:
	submit_script: is the script file to be submitted
	inputfile:     is the input file of the job 
	job#:          is an optional job number to begin monitoring
HELP
exit 0
}

check_job()
{
ERROR=$(scontrol show job $1 2>&1 | grep error)
if [ "x$ERROR" = "x" ]; then
  RUNTEST=$(scontrol show job $1 | grep State | cut -d "=" -f 2 | cut -d " " -f 1)
  echo "Job $1 is $RUNTEST"
else
  echo "Error in job $1. Exiting."
  exit 1
fi
while [ "$RUNTEST" != "RUNNING" -a "$RUNTEST" != "COMPLETED" -a "$RUNTEST" != "CANCELLED" -a "x$ERROR" == "x" ]
do
  sleep 10
  ERROR=$(scontrol show job $1 2>&1 | grep error)
  RUNTEST=$(scontrol show job $1 | grep State | cut -d "=" -f 2 | cut -d " " -f 1)
  #echo "Job $1 is $RUNTEST"
done
if [ "x$ERROR" = "x" ]; then
  echo "Job $1 is $RUNTEST"
  rm exit_code.txt 2> /dev/null  
else
  echo "Error in job $1. Exiting."
  exit 1
fi
} 

check_return_code()
{
echo "Checking return value for job $1 ..."
RETURN_VALUE=""
while [ "$RETURN_VALUE" = "" ]
do
  sleep 60
  RETURN_VALUE=$(cat exit_code.txt 2> /dev/null)
done
echo "Return value found: $RETURN_VALUE"
}

new_job()
{
sed  -i -e '/restart/{' \
        -e 'c\' \
        -e '    ts_restart  = t' \
        -e '}' \
        $inputfile

JOB=$(sbatch $1 --dependency=after:$JOB | cut -d " " -f 4)
echo 'New JOB='$JOB

check_job $JOB

check_return_code $JOB

if [ "$RETURN_VALUE" = "1" ]; then
  new_job $1
fi
}

#Parse input options

if [ "$#" = 0 ]; then
  help
  exit 1
fi

# Begin script

date
rm exit_code.txt 2> /dev/null

# First submission

inputfile=$2
JOB="$3"

if [ "$JOB" = "" ]; then
  JOB=$(sbatch $1 | cut -d " " -f 4)
  echo 'New JOB='$JOB
fi

check_job $JOB

check_return_code $JOB

#Subsequent submissions

if [ "$RETURN_VALUE" = "1" ]; then  #CPU quota exit; restart
  new_job $1
fi

#Clean up

date

echo 'Done'
exit
