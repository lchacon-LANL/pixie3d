#!/bin/bash

help()
{
cat <<HELP
Usage: 

$0 submit_script [job#]

where:
	submit_script: is the script file to be submitted
	job#:          is an optional job number to begin monitoring
HELP
exit 0
}

check_job()
{
RUNTEST=$(scontrol show job $1 | grep State | cut -d "=" -f 2 | cut -d " " -f 1)
echo "Job $1 is $RUNTEST"
while [ "$RUNTEST" != "RUNNING" -a "$RUNTEST" != "COMPLETED" -a "$RUNTEST" != "CANCELLED" ]
do
  sleep 60
  RUNTEST=$(scontrol show job $1 | grep State | cut -d "=" -f 2 | cut -d " " -f 1)
  #echo "Job $1 is $RUNTEST"
done
echo "Job $1 is $RUNTEST"
}

check_return_code()
{
echo "Checking return value for job $1 ..."
RETURN_VALUE=""
while [ "$RETURN_VALUE" = "" ]
do
  sleep 60
  RETURN_VALUE=$(cat exit_code.txt 2> /dev/null)
done
echo "Return value found: $RETURN_VALUE"
}

new_job()
{
sed -e s/"restart  = f"/"restart  = t"/g pixie3d.in > pixie3d.in2
mv pixie3d.in2 pixie3d.in
rm exit_code.txt 2> /dev/null
JOB=$(sbatch $1 --dependency=after:$JOB | cut -d " " -f 4)
echo 'New JOB='$JOB

check_job $JOB

check_return_code $JOB

if [ "$RETURN_VALUE" = "1" ]; then
  new_job $1
fi
}

#Parse input options

if [ "$#" = 0 ]; then
  help
  exit 1
fi

# Begin script

date

# First submission

JOB="$2"

if [ "$JOB" = "" ]; then
  sed -e s/"restart  = t"/"restart  = f"/g pixie3d.in > pixie3d.in2
  mv pixie3d.in2 pixie3d.in
  rm exit_code.txt 2> /dev/null
  JOB=$(sbatch $1 | cut -d " " -f 4)
  echo 'New JOB='$JOB
fi

check_job $JOB

check_return_code $JOB

#Subsequent submissions

if [ "$RETURN_VALUE" = "1" ]; then  #CPU quota exit; restart
  new_job $1
fi

#Clean up

date

echo 'Done'
exit
